from sage.matroids.advanced import *

K5 = graphs.CompleteGraph(5)
K5 = Matroid(K5)

def all_matroids(field, maxsize, maxrank):
    count = 0
    D = {}
    D[(0,0)] = [Matroid(field=field, groundset=[], matrix=[[]])]
    for n in range(1, maxsize + 1):
        e = n
        D[(0,n)] = []
        for r in range(n):
            for M in D[(r, n - 1 - r)]:
                if M.rank() < maxrank + 1:
                    S = [N for N in M.linear_extensions(element=e, simple=True) if e in list(N._weak_partition())[-1]]
                    for N in S:
                        if count == 0 and not any(N.is_field_isomorphic(NN) for NN in D[(r, n - r)]) and not N.has_minor(K5):
                                D[(r, n - r)].append(N)
                                count += 1
            count = 0
            D[(r + 1, n - 1 - r)] = [M.linear_coextension(e, cochain={f:0 for f in M.groundset()}) for M in D[(r, n - 1 - r)] if M.rank() < maxrank]
            save(D, "Test.sobj")
    return D

K5min = all_matroids(GF(2), 30, 30)

for n in range(30):
    s = ''
    for r in range(n+1):
        s = s + ' ' + str(len(K5min[(r,n-r)]))
    print s


from sage.matroids.advanced import *

K5 = graphs.CompleteGraph(5)
K5 = Matroid(K5)

#Minimum Circumference
for n in range(20):
    s = ''
    for r in range(n+1):
        min = r + 1
        if len(K5min[(r, n-r)]) == 0:
            s = s + ' 0'
        else:
            for matroid in K5min[(r, n-r)]:
                max = 0 
                for circuit in matroid.circuits():
                    if max < len(circuit):
                        max = len(circuit)
                if max < min:
                    min = max
            s = s + ' ' + str(min)
    print s
    
Test = Matroid(field=GF(2), groundset=[], matrix=[[]])


for n in range(20):
    s = ''
    for r in range(n+1):
        if len(K5min[(r, n-r)]) == 0:
            s = s + ' 0'
        else:
            min_matroid = 0
            TEST = 0
            for matroid in K5min[(r, n-r)]:
                    count = 0
                    for circuit in matroid.circuits():
                        if len(circuit) == 3:
                            count += 1
                    if count > TEST:
                        TEST = count
            if TEST > min_matroid:
                min_matroid = TEST
            if min_matroid == 100:
                s = s + ' 0'
            else:
                s = s + ' ' + str(min_matroid)
    print s